{"version":3,"sources":["components/LayerColumn.js","components/LayerBlock.js","components/ModelColumn.js","components/EditColumn.js","views/CreatePage.js","App.js","serviceWorker.js","index.js"],"names":["LayerColumn","struct","setStruct","setPageIndex","AddLayer","layer","temp","push","length","className","onClick","type","nodes","flatten","activation","filters","width","stride","LayerBlock","isSet","setPage","style","background","Input","Dense","Conv","color","ModelColumn","pageIndex","map","index","key","EditColumn","edit","e","attr","target","value","optimizer","onChange","epochs","batch","console","log","fetch","method","body","JSON","stringify","headers","Headers","then","response","json","CreatePage","useState","loss","metrics","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92a6a3ab.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function LayerColumn({struct, setStruct, setPageIndex}) {\r\n    const AddLayer = layer => {\r\n        let temp = [...struct]\r\n        temp.push(layer)\r\n        setPageIndex(struct.length) // Focus on added layer\r\n        setStruct(temp)\r\n    }\r\n    \r\n    return (\r\n        <div className='LayerColumn'>\r\n            <h1>Layers</h1>\r\n\r\n            <div \r\n                className='addLayer' \r\n                onClick={() => AddLayer({ // Doesn't cause rerender\r\n                    type: 'Dense',\r\n                    nodes: 10,\r\n                    flatten: 0,\r\n                    activation: 'None'\r\n                })}>Dense\r\n                <div className=\"plus\">+</div>\r\n            </div>\r\n            <div \r\n                className='addLayer' \r\n                onClick={() => AddLayer({ // Doesn't cause rerender\r\n                    type: 'Conv',\r\n                    filters: 1,\r\n                    width: 3,\r\n                    stride: 1,\r\n                    flatten: 0,\r\n                    activation: 'None'\r\n                })}>Convolution\r\n                <div className=\"plus\">+</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function LayerBlock({type, isSet, setPage}) {\r\n    const colors = {\r\n        Input: ['#F2EAED', '#A4A4BF'],\r\n        Dense: ['rgb(237, 237, 251)', '#2A3457'],\r\n        Conv: ['rgb(251, 206, 223)', '#F991B8']\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className='Layer' \r\n            style={{\r\n                background: colors[type][isSet ? 1 : 0],\r\n                color: isSet ? '#FFF' : '#000'\r\n            }}\r\n            onClick={setPage}\r\n        >\r\n            <h2>{type} Layer</h2>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport LayerBlock from './LayerBlock'\r\n\r\nexport default function ModelColumn({struct, pageIndex, setPageIndex}) {   \r\n    // Add successive layers\r\n    const renderLayers = () => {\r\n        const layers = struct.map((layer, index) => {\r\n            return <LayerBlock \r\n                setPage={() => setPageIndex(index)}\r\n                key={index}\r\n                isSet={index === pageIndex}\r\n                type={layer.type}\r\n            />\r\n        })\r\n        return layers\r\n    }\r\n\r\n    return (\r\n        <div className='ModelColumn'>\r\n            <h1>Model</h1>\r\n            {renderLayers()}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function EditColumn({struct, setStruct, pageIndex}) {\r\n    const train = () => {\r\n        console.log(struct)\r\n        fetch('/api/train', {\r\n            method: 'POST',\r\n            body: JSON.stringify(struct), \r\n            headers: new Headers({'content-type': 'application/json'}),\r\n        })\r\n        .then((response) => { response.json()\r\n        .then((body) => console.log(body));\r\n        });\r\n    }\r\n\r\n    const edit = (e, attr) => {\r\n        let temp = [...struct]\r\n        temp[pageIndex][attr] = e.target.value\r\n        setStruct(temp)\r\n    }\r\n\r\n    return (\r\n        <div className='EditColumn'>\r\n            <div className='EditSection'>\r\n                <h1>Layer Parameters</h1>\r\n                {struct[pageIndex].type === 'Input' &&\r\n                <div>\r\n                    <h2>Optimizer</h2>\r\n                    <select value={struct[pageIndex].optimizer} onChange={e => edit(e, 'optimizer')}>\r\n                        <option value=\"SGD\">SGD</option>\r\n                        <option value=\"adam\">Adam</option>\r\n                    </select>\r\n                    <h2>Epochs</h2>\r\n                    <input type='text' value={struct[pageIndex].epochs} onChange={e => edit(e, 'epochs')}/>\r\n                    <h2>Batch Size</h2>\r\n                    <input type='text' value={struct[pageIndex].batch} onChange={e => edit(e, 'batch')}/>\r\n                </div>}\r\n\r\n                {struct[pageIndex].type === 'Dense' &&\r\n                <div>\r\n                    <h2># of Nodes</h2>\r\n                    <input type='text' value={struct[pageIndex].nodes} onChange={e => edit(e, 'nodes')}/>\r\n                    <h2>Activation</h2>\r\n                    <select value={struct[pageIndex].activation} onChange={e => edit(e, 'activation')}>\r\n                        <option value=\"none\">None</option>\r\n                        <option value=\"sigmoid\">Sigmoid</option>\r\n                        <option value=\"tanh\">Tanh</option>\r\n                        <option value=\"relu\">Relu</option>\r\n                        <option value=\"softmax\">Softmax</option>\r\n                    </select>\r\n                </div>}\r\n\r\n                {struct[pageIndex].type === 'Conv' &&\r\n                <div>\r\n                    <h2>Kernel Width & Length</h2>\r\n                    <input type='text' value={struct[pageIndex].width} onChange={e => edit(e, 'width')}/>\r\n                    <h2>Stride</h2>\r\n                    <input type='text' value={struct[pageIndex].stride} onChange={e => edit(e, 'stride')}/>\r\n                    <h2>Activation</h2>\r\n                    <select value={struct[pageIndex].activation} onChange={e => edit(e, 'activation')}>\r\n                        <option value=\"none\">None</option>\r\n                        <option value=\"sigmoid\">Sigmoid</option>\r\n                        <option value=\"tanh\">Tanh</option>\r\n                        <option value=\"relu\">Relu</option>\r\n                        <option value=\"softmax\">Softmax</option>\r\n                    </select>\r\n                </div>}\r\n                <h2>Flatten Output</h2>\r\n                    <select value={struct[pageIndex].flatten} onChange={e => edit(e, 'flatten')}>\r\n                        <option value={1}>Yes</option>\r\n                        <option value={0}>No</option>\r\n                </select>\r\n            </div>\r\n            <div className='TrainSection'>\r\n                <button className='TaTbtn' onClick={train}>Train & Test</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport LayerColumn from '../components/LayerColumn'\r\nimport ModelColumn from '../components/ModelColumn'\r\nimport EditColumn from '../components/EditColumn'\r\nimport '../styles/Formatting.css'\r\nimport '../styles/Defaults.css'\r\nimport '../styles/Objects.css'\r\n\r\nexport default function CreatePage() {\r\n  const [struct, setStruct] = useState([{\r\n    type: \"Input\",\r\n    optimizer: 'SGD',\r\n    loss: 'sparse_categorical_crossentropy',\r\n    metrics: 'accuracy',\r\n    epochs: 1,\r\n    batch: 64,\r\n    flatten: 1\r\n  }])\r\n  const [pageIndex, setPageIndex] = useState(0)\r\n\r\n  return (\r\n    <div className=\"cl-main\">\r\n      <LayerColumn \r\n        struct={struct} \r\n        setStruct={setStruct}\r\n        setPageIndex={setPageIndex}\r\n      />\r\n      <ModelColumn \r\n        struct={struct} \r\n        setPageIndex={setPageIndex} \r\n        pageIndex={pageIndex}\r\n      />\r\n      <EditColumn \r\n        struct={struct} \r\n        setStruct={setStruct} \r\n        pageIndex={pageIndex} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\n\r\nimport './styles/App.css'; \r\nimport CreatePage from './views/CreatePage';\r\n\r\nfunction App() {\r\n  return (\r\n      <Router className=\"App\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={CreatePage} />\r\n          </Switch>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}